---
interface Props {
    title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content="Astro description" />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
        <script
            is:inline
            src="https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js"
        ></script>
    </head>
    <body>
        <slot />
        <script
            is:inline
            src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.0/flowbite.min.js"
        ></script>
    </body>
    <script is:inline>
        const modalBackdrop = document.querySelector(".fb-modal-backdrop");

        // Check if the modal backdrop element exists
        if (modalBackdrop) {
            // Set the z-index to a higher value (e.g., 1000)
            modalBackdrop.style.zIndex = "1000";
        }
    </script>

    <script is:inline>
        // Target the draggable elements within the container
        interact(".draggable").draggable({
            // Enable inertial throwing
            inertia: true,

            // Restrict movement to the parent element
            restrict: {
                restriction: "#draggable-container",
                endOnly: true,
                elementRect: { top: 0, left: 0, bottom: 1, right: 1 },
            },

            // Enable autoScroll
            autoScroll: true,

            // Call this function on every dragmove event
            onmove: dragMoveListener,
        });

        function dragMoveListener(event) {
            var target = event.target;
            // Keep the dragged position in the data-x/data-y attributes
            var x = (parseFloat(target.getAttribute("data-x")) || 0) + event.dx;
            var y = (parseFloat(target.getAttribute("data-y")) || 0) + event.dy;

            // Translate the element
            target.style.webkitTransform = target.style.transform =
                "translate(" + x + "px, " + y + "px)";

            // Update the position attributes
            target.setAttribute("data-x", x);
            target.setAttribute("data-y", y);
        }
    </script>
    <script is:inline>
        interact(".resize-drag")
            .resizable({
                // resize from all edges and corners
                edges: { left: true, right: true, bottom: true, top: true },

                listeners: {
                    move(event) {
                        var target = event.target;
                        var x = parseFloat(target.getAttribute("data-x")) || 0;
                        var y = parseFloat(target.getAttribute("data-y")) || 0;

                        // update the element's style
                        target.style.width = event.rect.width + "px";
                        target.style.height = event.rect.height + "px";

                        // translate when resizing from top or left edges
                        x += event.deltaRect.left;
                        y += event.deltaRect.top;

                        target.style.transform =
                            "translate(" + x + "px," + y + "px)";

                        target.setAttribute("data-x", x);
                        target.setAttribute("data-y", y);
                        target.textContent =
                            Math.round(event.rect.width) +
                            "\u00D7" +
                            Math.round(event.rect.height);
                    },
                },
                modifiers: [
                    // keep the edges inside the parent
                    interact.modifiers.restrictEdges({
                        outer: "parent",
                    }),

                    // minimum size
                    interact.modifiers.restrictSize({
                        min: { width: 10, height: 10 },
                    }),
                ],

                inertia: true,
            })
            .draggable({
                listeners: { move: window.dragMoveListener },
                inertia: true,
                modifiers: [
                    interact.modifiers.restrictRect({
                        restriction: "parent",
                        endOnly: true,
                    }),
                ],
            });
    </script>
    <script is:inline>
        const fileInput = document.getElementById("dropzone-file");
        const imagePreview = document.getElementById("image-preview");
        const previewImage = document.getElementById("preview-image");
        const removeOverlay = document.getElementById("remove-overlay");
        const uploadContent = document.getElementById("upload-content");

        // Function to handle file selection
        fileInput.addEventListener("change", (event) => {
            const file = event.target.files[0];

            if (file && file.type.startsWith("image/")) {
                const reader = new FileReader();

                // Show image preview
                reader.onload = (e) => {
                    previewImage.src = e.target.result;
                    previewImage.classList.remove("hidden");
                    uploadContent.classList.add("hidden");
                    imagePreview.classList.remove("hidden");
                };

                reader.readAsDataURL(file);
            }
        });

        // Function to handle image removal on overlay click
        removeOverlay.addEventListener("click", () => {
            previewImage.src = "#";
            previewImage.classList.add("hidden");
            imagePreview.classList.add("hidden");
            uploadContent.classList.remove("hidden");
            fileInput.value = ""; // Reset file input
        });

        // Show remove overlay on hover
        imagePreview.addEventListener("mouseover", () => {
            removeOverlay.classList.remove("hidden");
        });

        imagePreview.addEventListener("mouseout", () => {
            removeOverlay.classList.add("hidden");
        });
    </script>
</html>
